generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  position     String
  employeeId   String  @unique
  profileImage String?
  role         Role    @default(EMPLOYEE)

  // Relations
  headedDepartments  Department[]  @relation("DepartmentHead")
  createdDepartments Department[]  @relation("DepartmentCreator")
  createdHolidays    Holiday[]     @relation("HolidayCreator")
  updatedHolidays    Holiday[]     @relation("HolidayUpdater")
  attendance         Attendance[]
  applications       Application[]

  createdLeaves  Leave[] @relation("LeaveCreatedBy")
  approvedLeaves Leave[] @relation("LeaveApprovedBy")
  employee   Employee? @relation(fields: [employeeId], references: [id])
  
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  requirements String
  salary       Float?
  location     String?
  type         JobType
  status       JobStatus     @default(OPEN)
  departmentId String
  department   Department    @relation(fields: [departmentId], references: [id])
  createdBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWED
  OFFERED
  REJECTED
}

model Application {
  id        String            @id @default(uuid())
  jobId     String
  job       Job               @relation(fields: [jobId], references: [id])
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  status    ApplicationStatus @default(PENDING)
  appliedAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Employee {
  id                           String           @id @unique @default(uuid())
  employeeId                   String           @unique
  firstName                    String
  lastName                     String
  middleName                   String?
  email                        String           @unique
  phoneNumber                  String           @unique
  gender                       String
  dateOfBirth                  DateTime
  address                      String
  nationalID                   String           @unique
  departmentId                 String
  department                   Department       @relation("EmployeeDepartment", fields: [departmentId], references: [id], onDelete: Cascade)
  position                     String
  dateOfJoining                DateTime
  employmentType               EmploymentType
  maritalStatus                MaritalStatus
  emergencyContactName         String
  emergencyContactPhone        String
  emergencyContactRelationship String
  bankName                     String?
  bankAccountNumber            String?
  bankBranch                   String?
  taxID                        String?
  socialSecurityNumber         String?
  salary                       Float?
  currency                     Currency? // NGN, USD, EUR
  isProbation                  Boolean          @default(false)
  probationEndDate             DateTime?
  contractEndDate              DateTime?
  employmentStatus             EmploymentStatus @default(ACTIVE)
  profileImage                 String?
  resumeLink                   String?
  contractLink                 String?
  identityDocumentLink         String?
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
  Leave                        Leave[]
  user                         User?
  

  @@index([email], name: "email_index")
  @@index([nationalID], name: "nationalID_index")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
}

enum Currency {
  NGN
  USD
  EUR
}

enum EmploymentStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
}

model Department {
  id        String   @id @unique @default(uuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departmentHeadId String?
  departmentHead   User?   @relation("DepartmentHead", fields: [departmentHeadId], references: [id])

  employees Employee[] @relation("EmployeeDepartment")

  createdById String
  createdBy   User    @relation("DepartmentCreator", fields: [createdById], references: [id])
  jobs        Job[]
  Leave       Leave[]
}

model Holiday {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  isRecurring Boolean  @default(false) // Indicates if the holiday recurs annually
  createdById String // References the User who created the holiday
  updatedById String? // References the User who last updated the holiday
  createdBy   User     @relation("HolidayCreator", fields: [createdById], references: [id])
  updatedBy   User?    @relation("HolidayUpdater", fields: [updatedById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date, isRecurring], name: "holiday_date_isRecurring_idx")
}

model Leave {
  id          String      @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  reason      String
  leaveType   String
  status      LeaveStatus @default(PENDING)
  isPaidLeave Boolean     @default(false)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Added position and department fields
  position     String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  createdById String
  createdBy   User   @relation("LeaveCreatedBy", fields: [createdById], references: [id])

  approvedById String?
  approvedBy   User?   @relation("LeaveApprovedBy", fields: [approvedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Attendance {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  date      DateTime
  checkIn   DateTime
  checkOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}
